{"ast":null,"code":"import _slicedToArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _ from \"lodash\";\nimport { useState, useEffect } from \"react\";\n/**\n * Hook allow list of item can be expand\n * @param {T[]} data\n * @returns {[T[] , boolean , ((newState: (boolean | (() => boolean))) => void)]}\n */\n\nexport var useExpandableList = function useExpandableList(data) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isExpand = _useState2[0],\n      setIsExpand = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      list = _useState4[0],\n      setList = _useState4[1];\n\n  useEffect(function () {\n    if (data.length > 0) {\n      var newList = isExpand ? data : _.slice(data, 0, 3);\n      setList(newList);\n    }\n  }, [isExpand, data]);\n  return [list, isExpand, setIsExpand];\n};","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/store/hooks/filterHooks.ts"],"names":["_","useState","useEffect","useExpandableList","data","isExpand","setIsExpand","list","setList","length","newList","slice"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAA8D,OAA9D;AAEA;;;;;;AAKA,OAAO,IAAMC,iBAAiB,GAAI,SAArBA,iBAAqB,CAChCC,IADgC,EAEsB;AAAA,kBACtBH,QAAQ,CAAU,KAAV,CADc;AAAA;AAAA,MAC/CI,QAD+C;AAAA,MACrCC,WADqC;;AAAA,mBAE9BL,QAAQ,CAAM,EAAN,CAFsB;AAAA;AAAA,MAE/CM,IAF+C;AAAA,MAEzCC,OAFyC;;AAItDN,EAAAA,SAAS,CACP,YAAM;AACJ,QAAIE,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAMC,OAAO,GAAGL,QAAQ,GAAGD,IAAH,GAAUJ,CAAC,CAACW,KAAF,CAAQP,IAAR,EAAc,CAAd,EAAiB,CAAjB,CAAlC;AACAI,MAAAA,OAAO,CAACE,OAAD,CAAP;AACD;AACF,GANM,EAOP,CAACL,QAAD,EAAWD,IAAX,CAPO,CAAT;AAUA,SAAO,CAACG,IAAD,EAAOF,QAAP,EAAiBC,WAAjB,CAAP;AACD,CAjBM","sourcesContent":["import _ from \"lodash\";\nimport { useState, useEffect, Dispatch, SetStateAction } from \"react\";\n\n/**\n * Hook allow list of item can be expand\n * @param {T[]} data\n * @returns {[T[] , boolean , ((newState: (boolean | (() => boolean))) => void)]}\n */\nexport const useExpandableList = <T>(\n  data: T[]\n): [T[], boolean, Dispatch<SetStateAction<boolean>>] => {\n  const [isExpand, setIsExpand] = useState<boolean>(false);\n  const [list, setList] = useState<T[]>([]);\n\n  useEffect(\n    () => {\n      if (data.length > 0) {\n        const newList = isExpand ? data : _.slice(data, 0, 3);\n        setList(newList);\n      }\n    },\n    [isExpand, data]\n  );\n\n  return [list, isExpand, setIsExpand];\n};\n"]},"metadata":{},"sourceType":"module"}
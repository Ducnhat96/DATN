{"ast":null,"code":"import _toConsumableArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport moment from 'moment';\nimport { useMemo } from 'react';\nimport _ from 'lodash';\n\n/**\n * Format money to user friendly\n * @param amount Money amount\n * @param decimalCount Number of decimal\n * @param decimal Decimal Separator\n * @param thousands Thousand separator\n * @returns {string}\n */\nexport var formatMoney = function formatMoney(amount) {\n  var decimalCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n  var thousands = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ',';\n\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    var negativeSign = amount < 0 ? '-' : '';\n    var i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    var j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : '');\n  } catch (e) {\n    console.error(e);\n  }\n};\nexport var formatTime = function formatTime(date) {\n  var hours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var seconds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var momentObject = moment(date, 'YYYY-MM-DD').hours(hours).minutes(minutes).seconds(seconds);\n  if (!momentObject.isValid()) throw 'Date format invalid';\n  return momentObject.format('YYYY-MM-DD HH:mm:ss');\n};\nexport var arrayFilterCheckBoxEvent = function arrayFilterCheckBoxEvent(current, event, status) {\n  var list = _toConsumableArray(current);\n\n  var value = parseInt(event.target.value);\n  status ? list.push(value) : _.remove(list, function (n) {\n    return n === value;\n  });\n  return list;\n};\nexport var selfMemo = function selfMemo(value) {\n  return useMemo(function () {\n    return value;\n  }, [value]);\n};","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/utils/mixins.ts"],"names":["moment","useMemo","_","formatMoney","amount","decimalCount","decimal","thousands","Math","abs","isNaN","negativeSign","i","parseInt","Number","toFixed","toString","j","length","substr","replace","slice","e","console","error","formatTime","date","hours","minutes","seconds","momentObject","isValid","format","arrayFilterCheckBoxEvent","current","event","status","list","value","target","push","remove","n","selfMemo"],"mappings":";AAAA,OAAOA,MAAP,MAA6B,QAA7B;AACA,SAAqBC,OAArB,QAAmC,OAAnC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAGA;;;;;;;;AAQA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAA0G;AAAA,MAA5FC,YAA4F,uEAArE,CAAqE;AAAA,MAAlEC,OAAkE,uEAAhD,GAAgD;AAAA,MAA3CC,SAA2C,uEAAvB,GAAuB;;AACnI,MAAI;AACFF,IAAAA,YAAY,GAAGG,IAAI,CAACC,GAAL,CAASJ,YAAT,CAAf;AACAA,IAAAA,YAAY,GAAGK,KAAK,CAACL,YAAD,CAAL,GAAsB,CAAtB,GAA0BA,YAAzC;AAEA,QAAMM,YAAY,GAAGP,MAAM,GAAG,CAAT,GAAa,GAAb,GAAmB,EAAxC;AAEA,QAAIQ,CAAM,GAAGC,QAAQ,CAACT,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASK,MAAM,CAACV,MAAD,CAAN,IAAkB,CAA3B,EAA8BW,OAA9B,CAAsCV,YAAtC,CAAV,CAAR,CAAuEW,QAAvE,EAAb;AACA,QAAIC,CAAS,GAAIL,CAAC,CAACM,MAAF,GAAW,CAAZ,GAAiBN,CAAC,CAACM,MAAF,GAAW,CAA5B,GAAgC,CAAhD;AAEA,WAAOP,YAAY,IAAIM,CAAC,GAAGL,CAAC,CAACO,MAAF,CAAS,CAAT,EAAYF,CAAZ,IAAiBV,SAApB,GAAgC,EAArC,CAAZ,GACAK,CAAC,CAACO,MAAF,CAASF,CAAT,EAAYG,OAAZ,CAAoB,gBAApB,EAAsC,OAAOb,SAA7C,CADA,IAECF,YAAY,GAAGC,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASL,MAAM,GAAGQ,CAAlB,EAAqBG,OAArB,CAA6BV,YAA7B,EAA2CgB,KAA3C,CAAiD,CAAjD,CAAb,GAAmE,EAFhF,CAAP;AAGD,GAZD,CAYE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,CAhBM;AAkBP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAuF;AAAA,MAAxEC,KAAwE,uEAAxD,CAAwD;AAAA,MAArDC,OAAqD,uEAAnC,CAAmC;AAAA,MAAhCC,OAAgC,uEAAd,CAAc;AAE/G,MAAIC,YAAoB,GAAG9B,MAAM,CAAC0B,IAAD,EAAO,YAAP,CAAN,CACxBC,KADwB,CAClBA,KADkB,EAExBC,OAFwB,CAEhBA,OAFgB,EAGxBC,OAHwB,CAGhBA,OAHgB,CAA3B;AAKA,MAAI,CAACC,YAAY,CAACC,OAAb,EAAL,EAA6B,MAAM,qBAAN;AAE7B,SAAOD,YAAY,CAACE,MAAb,CAAoB,qBAApB,CAAP;AACD,CAVM;AAYP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAA6BC,OAA7B,EAAgDC,KAAhD,EAAuEC,MAAvE,EAA2F;AACjI,MAAIC,IAAI,sBAAQH,OAAR,CAAR;;AACA,MAAII,KAAK,GAAGzB,QAAQ,CAACsB,KAAK,CAACI,MAAN,CAAaD,KAAd,CAApB;AACAF,EAAAA,MAAM,GAAGC,IAAI,CAACG,IAAL,CAAUF,KAAV,CAAH,GAAsBpC,CAAC,CAACuC,MAAF,CAASJ,IAAT,EAAe,UAAAK,CAAC;AAAA,WAAIA,CAAC,KAAKJ,KAAV;AAAA,GAAhB,CAA5B;AAEA,SAAOD,IAAP;AACD,CANM;AAQP,OAAO,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAAUL,KAAV,EAA0B;AAChD,SAAOrC,OAAO,CAAC;AAAA,WAAMqC,KAAN;AAAA,GAAD,EAAc,CAACA,KAAD,CAAd,CAAd;AACD,CAFM","sourcesContent":["import moment, {Moment} from 'moment';\nimport {ChangeEvent, useMemo} from 'react';\nimport _ from 'lodash';\nimport {PromiseCallBack} from '@/types/Requests/RequestTemplate';\n\n/**\n * Format money to user friendly\n * @param amount Money amount\n * @param decimalCount Number of decimal\n * @param decimal Decimal Separator\n * @param thousands Thousand separator\n * @returns {string}\n */\nexport const formatMoney = (amount: any, decimalCount: number = 0, decimal: string = '.', thousands: string = ','): string | void => {\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n\n    const negativeSign = amount < 0 ? '-' : '';\n\n    let i: any = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    let j: number = (i.length > 3) ? i.length % 3 : 0;\n\n    return negativeSign + (j ? i.substr(0, j) + thousands : '') +\n           i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + thousands) +\n           (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : '');\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const formatTime = (date: string, hours: number = 0, minutes: number = 0, seconds: number = 0): string => {\n\n  let momentObject: Moment = moment(date, 'YYYY-MM-DD')\n    .hours(hours)\n    .minutes(minutes)\n    .seconds(seconds);\n\n  if (!momentObject.isValid()) throw 'Date format invalid';\n\n  return momentObject.format('YYYY-MM-DD HH:mm:ss');\n};\n\nexport const arrayFilterCheckBoxEvent = <E extends HTMLInputElement>(current: number[], event: ChangeEvent<E>, status: boolean) => {\n  let list  = [...current];\n  let value = parseInt(event.target.value);\n  status ? list.push(value) : _.remove(list, n => n === value);\n\n  return list;\n};\n\nexport const selfMemo = <T = any>(value: T): T => {\n  return useMemo(() => value, [value]);\n};\n"]},"metadata":{},"sourceType":"module"}
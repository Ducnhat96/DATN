{"ast":null,"code":"import _slicedToArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createContext } from 'react';\nimport qs from 'query-string';\nimport { axios } from '@/utils/axiosInstance';\nimport { updateObject } from '@/store/utility';\nimport _ from 'lodash';\nimport { makeRequestSingle } from '@/store/context/searchSuggestion';\nexport var MIN_PRICE = 0;\nexport var MAX_PRICE = 10000000;\nexport var STEP_PRICE = 10000;\nvar get = makeRequestSingle();\nexport var RoomIndexContext = createContext(null);\nexport var RoomIndexStateInit = {\n  price: {\n    min: MIN_PRICE,\n    max: MAX_PRICE\n  },\n  roomTypes: [],\n  comforts: [],\n  rooms: [],\n  amenities: [],\n  ratingLists: [],\n  roomTypesFilter: [],\n  sorts: null,\n  meta: null,\n  isLoadMore: false,\n  isMapOpen: true\n};\nexport var RoomIndexReducer = function RoomIndexReducer(state, action) {\n  switch (action.type) {\n    case 'setRooms':\n      return updateObject(state, {\n        rooms: action.rooms,\n        meta: action.meta || null\n      });\n\n    case 'setPrices':\n      return updateObject(state, {\n        price: action.price\n      });\n\n    case 'setMeta':\n      return updateObject(state, {\n        meta: action.meta\n      });\n\n    case 'setLoadMore':\n      return updateObject(state, {\n        isLoadMore: action.isLoadMore\n      });\n\n    case 'setMapOpen':\n      return updateObject(state, {\n        isMapOpen: action.isMapOpen\n      });\n\n    case 'setRating':\n      return updateObject(state, {\n        ratingLists: action.ratingLists\n      });\n\n    case 'setComforts':\n      return updateObject(state, {\n        comforts: action.comforts\n      });\n\n    case 'setAmenitiesFilter':\n      return updateObject(state, {\n        amenities: action.amenities\n      });\n\n    case 'setRoomTypes':\n      return updateObject(state, {\n        roomTypes: action.roomTypes\n      });\n\n    case 'setFilter':\n      return updateObject(state, {\n        roomTypesFilter: !action.roomTypesFilter ? state.roomTypesFilter : action.roomTypesFilter,\n        amenities: !action.amenities ? state.amenities : action.amenities,\n        ratingLists: !action.ratingLists ? state.ratingLists : action.ratingLists,\n        rooms: [],\n        sorts: action.sorts\n      });\n\n    default:\n      return state;\n  }\n};\n/**\n * Get list of rooms\n * @param {LocationDescriptorObject} location\n * @param {number} page\n * @param {MapCoords} coords\n * @returns {Promise<BaseResponse<RoomIndexRes[]>>}\n */\n\nexport var getRooms =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(location, page, coords) {\n    var params, query, signature, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof location !== 'string') {\n              params = qs.parse(location.search);\n            } else {\n              params = qs.parse(location);\n            }\n\n            query = {\n              include: 'details,media,city,district,comforts.details',\n              name: params.name,\n              city_id: params.city_id,\n              district_id: params.district_id,\n              rent_type: params.rent_type,\n              check_in: params.check_in,\n              check_out: params.check_out,\n              number_guest: params.number_of_guests,\n              most_popular: params.most_popular,\n              sort_total_review: params.sort_total_review === null ? 1 : undefined,\n              discount: params.discount === null ? 1 : undefined,\n              price_day_from: params.price_day_from,\n              price_day_to: params.price_day_to,\n              instant_book: typeof params.instant !== 'undefined' ? 1 : undefined,\n              sort_price_day: params.lowest_price === null ? 0 : 1,\n              standard_point: params.rating ? _.split(params.rating, ',')[0] : undefined,\n              comfort_lists: !!params.amenities ? params.amenities : undefined,\n              type_room: !!params.room_type ? params.room_type : undefined,\n              page: page\n            }; // console.log(query)\n\n            if (coords) {\n              query = updateObject(query, coords);\n            }\n\n            signature = coords ? 'rooms/room-lat-long' : 'rooms';\n            url = \"\".concat(signature, \"?\").concat(qs.stringify(query));\n            return _context.abrupt(\"return\", fetchRoom(url));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getRooms(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var newRoomLocation = function newRoomLocation(params) {\n  return {\n    pathname: '/rooms',\n    search: \"?\".concat(qs.stringify(params))\n  };\n};\nexport var fetchRoom =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(url) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(url);\n\n          case 2:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function fetchRoom(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchComforts =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var params, url, res;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            params = {\n              include: '',\n              limit: -1\n            }; // const url = `comforts?${qs.stringify(params)}`;\n\n            url = 'rooms/count-room-by-comfort-lists';\n            _context3.next = 4;\n            return axios.get(url);\n\n          case 4:\n            res = _context3.sent;\n            return _context3.abrupt(\"return\", res.data);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function fetchComforts() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchRoomType =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axios.get('rooms/type');\n\n          case 2:\n            res = _context4.sent;\n            return _context4.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function fetchRoomType() {\n    return _ref4.apply(this, arguments);\n  };\n}();\n/**\n * Load filter and room type\n * @param {React.Dispatch<RoomIndexAction>} dispatch\n */\n\nexport var loadFilter = function loadFilter(dispatch) {\n  Promise.all([fetchComforts(), fetchRoomType()]).then(function (res) {\n    var _res = _slicedToArray(res, 2),\n        comfortsRes = _res[0],\n        roomTypes = _res[1];\n\n    dispatch({\n      type: 'setComforts',\n      comforts: comfortsRes.data\n    });\n    dispatch({\n      type: 'setRoomTypes',\n      roomTypes: roomTypes\n    });\n  }).catch(function (err) {});\n};\n/**\n * Load more room when user scroll down\n * @param {RoomIndexState} state\n * @param {React.Dispatch<RoomIndexAction>} dispatch\n */\n\nexport var loadMoreRooms = function loadMoreRooms(state, dispatch) {\n  var meta = state.meta,\n      rooms = state.rooms;\n\n  if (meta !== null) {\n    var links = meta.pagination.links;\n\n    if (!_.isArray(links) && links.next) {\n      fetchRoom(links.next).then(function (data) {\n        var meta = data.meta;\n        var roomsNext = data.data;\n\n        var roomsUpdated = _.concat(rooms, roomsNext);\n\n        dispatch({\n          type: 'setRooms',\n          rooms: roomsUpdated,\n          meta: meta\n        });\n      }).catch(function (err) {});\n    } else {\n      dispatch({\n        type: 'setLoadMore',\n        isLoadMore: false\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/store/context/Room/RoomIndexContext.tsx"],"names":["createContext","qs","axios","updateObject","_","makeRequestSingle","MIN_PRICE","MAX_PRICE","STEP_PRICE","get","RoomIndexContext","RoomIndexStateInit","price","min","max","roomTypes","comforts","rooms","amenities","ratingLists","roomTypesFilter","sorts","meta","isLoadMore","isMapOpen","RoomIndexReducer","state","action","type","getRooms","location","page","coords","params","parse","search","query","include","name","city_id","district_id","rent_type","check_in","check_out","number_guest","number_of_guests","most_popular","sort_total_review","undefined","discount","price_day_from","price_day_to","instant_book","instant","sort_price_day","lowest_price","standard_point","rating","split","comfort_lists","type_room","room_type","signature","url","stringify","fetchRoom","newRoomLocation","pathname","res","data","fetchComforts","limit","fetchRoomType","loadFilter","dispatch","Promise","all","then","comfortsRes","catch","err","loadMoreRooms","links","pagination","isArray","next","roomsNext","roomsUpdated","concat"],"mappings":"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","sourcesContent":["import { createContext, Dispatch } from 'react';\nimport { RoomIndexRes } from '@/types/Requests/Rooms/RoomResponses';\nimport { LocationDescriptorObject } from 'history';\nimport qs from 'query-string';\nimport { AxiosRes, Pagination, BaseResponse, TypeSelect } from '@/types/Requests/ResponseTemplate';\nimport { axios } from '@/utils/axiosInstance';\nimport { updateObject } from '@/store/utility';\nimport { RoomIndexGetParams, RoomUrlParams, MapCoords } from '@/types/Requests/Rooms/RoomRequests';\nimport { Range } from 'react-input-range';\nimport _ from 'lodash';\nimport { ComfortIndexGetParams } from '@/types/Requests/Comforts/ComfortRequests';\nimport { ComfortIndexRes } from '@/types/Requests/Comforts/ComfortResponses';\nimport { AxiosResponse } from 'axios';\nimport { makeRequestSingle } from '@/store/context/searchSuggestion';\n\nexport const MIN_PRICE = 0;\nexport const MAX_PRICE = 10000000;\nexport const STEP_PRICE = 10000;\n\nconst get = makeRequestSingle();\n\nexport const RoomIndexContext = createContext<IRoomIndexContext | any>(null);\n\nexport interface IRoomIndexContext {\n  state: RoomIndexState,\n  dispatch: Dispatch<RoomIndexAction>,\n}\n\nexport type RoomIndexAction = { type: 'setRooms', rooms: RoomIndexRes[], meta?: Pagination | null }\n  | { type: 'setPrices', price: Range }\n  | { type: 'setMeta', meta: Pagination }\n  | { type: 'setLoadMore', isLoadMore: boolean }\n  | { type: 'setMapOpen', isMapOpen: boolean }\n  | { type: 'setRating', ratingLists: number[] }\n  | { type: 'setComforts', comforts: ComfortIndexRes[] }\n  | { type: 'setRoomTypes', roomTypes: TypeSelect[] }\n  | { type: 'setAmenitiesFilter', amenities: number[] }\n  | { type: 'setFilter', amenities?: number[], roomTypesFilter?: number[], ratingLists?: number[], sorts?: number }\n\nexport type RoomIndexState = {\n  readonly rooms: RoomIndexRes[]\n  readonly comforts: ComfortIndexRes[]\n  readonly roomTypes: TypeSelect[]\n  readonly sorts: any\n  readonly price: Range,\n  readonly ratingLists: number[]\n  readonly amenities: number[]\n  readonly roomTypesFilter: number[]\n  readonly meta: Pagination | null\n  readonly isLoadMore: boolean\n  readonly isMapOpen: boolean\n}\n\nexport const RoomIndexStateInit: RoomIndexState = {\n  price: {\n    min: MIN_PRICE,\n    max: MAX_PRICE,\n  },\n  roomTypes: [],\n  comforts: [],\n  rooms: [],\n  amenities: [],\n  ratingLists: [],\n  roomTypesFilter: [],\n  sorts: null,\n  meta: null,\n  isLoadMore: false,\n  isMapOpen: true,\n};\n\nexport const RoomIndexReducer = (state: RoomIndexState, action: RoomIndexAction): RoomIndexState => {\n  switch (action.type) {\n    case 'setRooms':\n      return updateObject<RoomIndexState>(state, {\n        rooms: action.rooms,\n        meta: action.meta || null,\n      });\n    case 'setPrices':\n      return updateObject<RoomIndexState>(state, {\n        price: action.price,\n      });\n    case 'setMeta':\n      return updateObject<RoomIndexState>(state, {\n        meta: action.meta,\n      });\n    case 'setLoadMore':\n      return updateObject<RoomIndexState>(state, {\n        isLoadMore: action.isLoadMore,\n      });\n    case 'setMapOpen':\n      return updateObject<RoomIndexState>(state, {\n        isMapOpen: action.isMapOpen,\n      });\n    case 'setRating':\n      return updateObject<RoomIndexState>(state, {\n        ratingLists: action.ratingLists,\n      });\n    case 'setComforts':\n      return updateObject<RoomIndexState>(state, {\n        comforts: action.comforts,\n      });\n    case 'setAmenitiesFilter':\n      return updateObject<RoomIndexState>(state, {\n        amenities: action.amenities,\n      });\n    case 'setRoomTypes':\n      return updateObject<RoomIndexState>(state, {\n        roomTypes: action.roomTypes,\n      });\n    case 'setFilter':\n      return updateObject(state, {\n        roomTypesFilter: !action.roomTypesFilter ? state.roomTypesFilter : action.roomTypesFilter,\n        amenities: !action.amenities ? state.amenities : action.amenities,\n        ratingLists: !action.ratingLists ? state.ratingLists : action.ratingLists,\n        rooms: [],\n        sorts: action.sorts,\n      });\n    default:\n      return state;\n  }\n};\n\n/**\n * Get list of rooms\n * @param {LocationDescriptorObject} location\n * @param {number} page\n * @param {MapCoords} coords\n * @returns {Promise<BaseResponse<RoomIndexRes[]>>}\n */\nexport const getRooms = async (\n  location: LocationDescriptorObject | string,\n  page?: number,\n  coords?: MapCoords,\n): Promise<BaseResponse<RoomIndexRes[]>> => {\n\n  let params: RoomUrlParams;\n  if (typeof location !== 'string') {\n    params = qs.parse(location.search!);\n  } else {\n    params = qs.parse(location);\n  }\n\n  let query: Partial<RoomIndexGetParams> = {\n    include: 'details,media,city,district,comforts.details',\n    name: params.name,\n    city_id: params.city_id,\n    district_id: params.district_id,\n    rent_type: params.rent_type,\n    check_in: params.check_in,\n    check_out: params.check_out,\n    number_guest: params.number_of_guests,\n    most_popular: params.most_popular,\n    sort_total_review: (params.sort_total_review === null) ? 1 : undefined,\n    discount: (params.discount === null) ? 1 : undefined,\n    price_day_from: params.price_day_from,\n    price_day_to: params.price_day_to,\n    instant_book: (typeof params.instant !== 'undefined') ? 1 : undefined,\n    sort_price_day: (params.lowest_price === null) ? 0 : 1,\n    standard_point: (params.rating) ? _.split(params.rating, ',')[0] : undefined,\n    comfort_lists: !!params.amenities ? params.amenities : undefined,\n    type_room: !!params.room_type ? params.room_type : undefined,\n    page,\n  };\n  // console.log(query)\n  if (coords) {\n    query = updateObject(query, coords);\n  }\n\n  const signature = coords ? 'rooms/room-lat-long' : 'rooms';\n  const url = `${signature}?${qs.stringify(query)}`;\n\n  return fetchRoom(url);\n};\n\nexport const newRoomLocation = (params: RoomUrlParams): LocationDescriptorObject => {\n  return {\n    pathname: '/rooms',\n    search: `?${qs.stringify(params)}`,\n  };\n};\n\nexport const fetchRoom = async (url: string) => {\n  const res: AxiosRes<RoomIndexRes[]> = await axios.get(url);\n  return res.data;\n};\n\nexport const fetchComforts = async () => {\n  const params: ComfortIndexGetParams = {\n    include: '',\n    limit: -1,\n  };\n\n  // const url = `comforts?${qs.stringify(params)}`;\n  const url = 'rooms/count-room-by-comfort-lists';\n  const res: AxiosRes<ComfortIndexRes[]> = await axios.get(url);\n  return res.data;\n};\n\nexport const fetchRoomType = async () => {\n  const res: AxiosResponse<TypeSelect[]> = await axios.get('rooms/type');\n  return res.data;\n};\n\n/**\n * Load filter and room type\n * @param {React.Dispatch<RoomIndexAction>} dispatch\n */\nexport const loadFilter = (dispatch: Dispatch<RoomIndexAction>) => {\n  Promise.all([\n    fetchComforts(),\n    fetchRoomType(),\n  ]).then(res => {\n    const [comfortsRes, roomTypes] = res;\n    dispatch({\n      type: 'setComforts',\n      comforts: comfortsRes.data,\n    });\n    dispatch({\n      type: 'setRoomTypes',\n      roomTypes,\n    });\n  }).catch(err => {\n\n  });\n};\n\n/**\n * Load more room when user scroll down\n * @param {RoomIndexState} state\n * @param {React.Dispatch<RoomIndexAction>} dispatch\n */\nexport const loadMoreRooms = (state: RoomIndexState, dispatch: Dispatch<RoomIndexAction>) => {\n  const { meta, rooms } = state;\n  if (meta !== null) {\n    let links = meta!.pagination.links;\n\n    if (!_.isArray(links) && links.next) {\n      fetchRoom(links.next).then(data => {\n        const meta = data.meta;\n        const roomsNext = data.data;\n        const roomsUpdated = _.concat(rooms, roomsNext);\n\n        dispatch({\n          type: 'setRooms',\n          rooms: roomsUpdated,\n          meta: meta,\n        });\n      }).catch(err => {\n\n      });\n    } else {\n      dispatch({\n        type: 'setLoadMore',\n        isLoadMore: false,\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
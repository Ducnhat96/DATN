{"ast":null,"code":"import _slicedToArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ducnhat/Code/x-files/src/views/Rooms/Filter/RoomTypes.tsx\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport React, { Fragment, useState, useEffect, useContext, memo } from \"react\";\nimport { compose } from \"recompose\";\nimport _ from \"lodash\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport { RoomIndexContext, newRoomLocation, loadFilter } from \"@/store/context/Room/RoomIndexContext\";\nimport { arrayFilterCheckBoxEvent } from \"@/utils/mixins\";\nimport { GlobalContext } from \"@/store/context/GlobalContext\";\nimport qs from \"query-string\";\nimport { updateObject } from \"@/store/utility\";\nimport { useExpandableList } from \"@/store/hooks/filterHooks\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Orange from \"@material-ui/core/colors/orange\";\n\nvar styles = function styles(theme) {\n  return createStyles({\n    ul: {\n      listStyleType: \"none\",\n      marginBlockStart: \"0px\",\n      paddingInlineStart: \"1rem\",\n      paddingBlockStart: \"0.5rem\",\n      marginBlockEnd: 0\n    },\n    checkboxRoot: {\n      padding: 5,\n      color: \"#7373739e\",\n      fontSize: \"0.9em\"\n    },\n    expandText: {\n      fontSize: \"0.9rem\",\n      // color: Blue[400],\n      color: Orange[500],\n      fontWeight: 500,\n      cursor: \"pointer\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    },\n    showMore: {\n      textAlign: \"right\",\n      marginBlockStart: 0\n    },\n    divider: {\n      margin: \"10px 0 10px 0\"\n    },\n    textCheckbox: {\n      color: \"#5a5b5b\",\n      fontSize: \"0.9em\",\n      \"&:hover\": {\n        color: \"#5392f9\"\n      }\n    },\n    filterTitle: {\n      fontWeight: 700\n    },\n    applyButton: {\n      background: 'transparent',\n      boxShadow: 'none',\n      color: '#ff9800',\n      fontWeight: 700,\n      textTransform: 'initial',\n      fontSize: '16px',\n      padding: '2px 11px'\n    }\n  });\n};\n\nvar RoomTypes = function RoomTypes(props) {\n  var classes = props.classes;\n\n  var _useContext = useContext(GlobalContext),\n      location = _useContext.location,\n      history = _useContext.history;\n\n  var _useContext2 = useContext(RoomIndexContext),\n      state = _useContext2.state,\n      dispatch = _useContext2.dispatch;\n\n  var roomTypes = state.roomTypes,\n      roomTypesFilter = state.roomTypesFilter;\n\n  var _useState = useState(roomTypesFilter),\n      _useState2 = _slicedToArray(_useState, 2),\n      roomTypeLocal = _useState2[0],\n      setRoomTypeLocal = _useState2[1];\n\n  var _useExpandableList = useExpandableList(roomTypes),\n      _useExpandableList2 = _slicedToArray(_useExpandableList, 3),\n      roomTypeChunks = _useExpandableList2[0],\n      isRoomTypeExpand = _useExpandableList2[1],\n      setRoomTypeExpand = _useExpandableList2[2];\n\n  var params = qs.parse(location.search);\n\n  var updateLocation = function updateLocation() {\n    var newParams = updateObject(params, {\n      room_type: _.join(roomTypeLocal, \",\")\n    });\n    var locationTo = newRoomLocation(newParams);\n    dispatch({\n      type: \"setFilter\",\n      roomTypesFilter: roomTypeLocal\n    });\n    history.push(locationTo);\n  };\n\n  var applyFilter = function applyFilter() {\n    updateLocation();\n  };\n\n  var roomTypeEvent = function roomTypeEvent(e, checked) {\n    var roomTypeLists = arrayFilterCheckBoxEvent(roomTypeLocal, e, checked);\n    roomTypeLists = _.sortBy(roomTypeLists);\n    setRoomTypeLocal(roomTypeLists);\n  };\n\n  useEffect(function () {\n    if (roomTypes.length === 0) loadFilter(dispatch);\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, roomTypes.length > 0 ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: classes.ul,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, _.map(roomTypeChunks, function (o) {\n    return React.createElement(\"li\", {\n      key: o.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        name: o.id.toString(),\n        color: \"primary\",\n        onChange: roomTypeEvent,\n        value: o.id.toString(),\n        checked: _.indexOf(roomTypeLocal, o.id) !== -1,\n        classes: {\n          root: classes.checkboxRoot\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }),\n      label: o.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }));\n  })), React.createElement(\"p\", {\n    className: classes.showMore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: classes.expandText,\n    onClick: function onClick() {\n      return setRoomTypeExpand(!isRoomTypeExpand);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, isRoomTypeExpand ? \"Thu g·ªçn\" : \"Xem th\\xEAm\")), React.createElement(Button, {\n    className: classes.applyButton,\n    onClick: applyFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"\\xC1p d\\u1EE5ng\")) : \"\");\n};\n\nexport default compose(withStyles(styles), memo)(RoomTypes);","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/views/Rooms/Filter/RoomTypes.tsx"],"names":["createStyles","withStyles","React","Fragment","useState","useEffect","useContext","memo","compose","_","FormControlLabel","Checkbox","RoomIndexContext","newRoomLocation","loadFilter","arrayFilterCheckBoxEvent","GlobalContext","qs","updateObject","useExpandableList","Button","Orange","styles","theme","ul","listStyleType","marginBlockStart","paddingInlineStart","paddingBlockStart","marginBlockEnd","checkboxRoot","padding","color","fontSize","expandText","fontWeight","cursor","textDecoration","showMore","textAlign","divider","margin","textCheckbox","filterTitle","applyButton","background","boxShadow","textTransform","RoomTypes","props","classes","location","history","state","dispatch","roomTypes","roomTypesFilter","roomTypeLocal","setRoomTypeLocal","roomTypeChunks","isRoomTypeExpand","setRoomTypeExpand","params","parse","search","updateLocation","newParams","room_type","join","locationTo","type","push","applyFilter","roomTypeEvent","e","checked","roomTypeLists","sortBy","length","map","o","id","toString","indexOf","root","value"],"mappings":"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","sourcesContent":["import { ThemeCustom } from \"@/components/Theme/Theme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport React, {\n  ComponentType,\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  ChangeEvent,\n  memo\n} from \"react\";\nimport { compose } from \"recompose\";\nimport _ from \"lodash\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport {\n  IRoomIndexContext,\n  RoomIndexContext,\n  newRoomLocation,\n  loadFilter\n} from \"@/store/context/Room/RoomIndexContext\";\nimport { arrayFilterCheckBoxEvent } from \"@/utils/mixins\";\nimport { IGlobalContext, GlobalContext } from \"@/store/context/GlobalContext\";\nimport { RoomUrlParams } from \"@/types/Requests/Rooms/RoomRequests\";\nimport qs from \"query-string\";\nimport { updateObject } from \"@/store/utility\";\nimport { useExpandableList } from \"@/store/hooks/filterHooks\";\nimport { TypeSelect } from \"@/types/Requests/ResponseTemplate\";\nimport Button from \"@material-ui/core/Button/Button\";\n\nimport Orange from \"@material-ui/core/colors/orange\";\n\ninterface IProps {\n  classes?: any;\n}\n\nconst styles: any = (theme: ThemeCustom) =>\n  createStyles({\n    ul: {\n      listStyleType: \"none\",\n      marginBlockStart: \"0px\",\n      paddingInlineStart: \"1rem\",\n      paddingBlockStart: \"0.5rem\",\n      marginBlockEnd: 0\n    },\n    checkboxRoot: {\n      padding: 5,\n      color: \"#7373739e\",\n      fontSize: \"0.9em\"\n    },\n    expandText: {\n      fontSize: \"0.9rem\",\n      // color: Blue[400],\n      color: Orange[500],\n      fontWeight: 500,\n      cursor: \"pointer\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    },\n    showMore: {\n      textAlign: \"right\",\n      marginBlockStart: 0\n    },\n    divider: {\n      margin: \"10px 0 10px 0\"\n    },\n    textCheckbox: {\n      color: \"#5a5b5b\",\n      fontSize: \"0.9em\",\n      \"&:hover\": {\n        color: \"#5392f9\"\n      }\n    },\n    filterTitle: {\n      fontWeight: 700\n    },\n    applyButton: {\n      background: 'transparent',\n      boxShadow: 'none',\n      color: '#ff9800',\n      fontWeight: 700,\n      textTransform: 'initial',\n      fontSize: '16px',\n      padding: '2px 11px'\n    }\n  });\n\nconst RoomTypes: ComponentType<IProps> = (props: IProps) => {\n  const { classes } = props;\n\n  const { location, history } = useContext<IGlobalContext>(GlobalContext);\n  const { state, dispatch } = useContext<IRoomIndexContext>(RoomIndexContext);\n\n  const { roomTypes, roomTypesFilter } = state;\n\n  const [roomTypeLocal, setRoomTypeLocal] = useState<number[]>(roomTypesFilter);\n\n  const [\n    roomTypeChunks,\n    isRoomTypeExpand,\n    setRoomTypeExpand\n  ] = useExpandableList<TypeSelect>(roomTypes);\n\n  const params: RoomUrlParams = qs.parse(location.search!);\n\n  const updateLocation = () => {\n    const newParams = updateObject(params, {\n      room_type: _.join(roomTypeLocal, \",\")\n    });\n\n    const locationTo = newRoomLocation(newParams);\n\n    dispatch({\n      type: \"setFilter\",\n      roomTypesFilter: roomTypeLocal\n    });\n\n    history.push(locationTo);\n  };\n\n  const applyFilter = () => {\n    updateLocation();\n\n  };\n\n  const roomTypeEvent = (\n    e: ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    let roomTypeLists = arrayFilterCheckBoxEvent(roomTypeLocal, e, checked);\n    roomTypeLists = _.sortBy(roomTypeLists);\n\n    setRoomTypeLocal(roomTypeLists);\n  };\n\n  useEffect(() => {\n    if (roomTypes.length === 0) loadFilter(dispatch);\n  }, []);\n\n  return (\n    <Fragment>\n      {roomTypes.length > 0 ? (\n        <Fragment>\n          <ul className={classes.ul}>\n            {_.map(roomTypeChunks, o => (\n              <li key={o.id}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name={o.id.toString()}\n                      color=\"primary\"\n                      onChange={roomTypeEvent}\n                      value={o.id.toString()}\n                      checked={_.indexOf(roomTypeLocal, o.id) !== -1}\n                      classes={{\n                        root: classes.checkboxRoot\n                      }}\n                    />\n                  }\n                  label={o.value}\n                />\n              </li>\n            ))}\n          </ul>\n          <p className={classes.showMore}>\n            <span\n              className={classes.expandText}\n              onClick={() => setRoomTypeExpand(!isRoomTypeExpand)}\n            >\n              {isRoomTypeExpand ? \"Thu g·ªçn\" : `Xem th√™m`}\n            </span>\n          </p>\n          <Button className= {classes.applyButton} onClick={applyFilter}>\n            √Åp d·ª•ng\n          </Button>\n        </Fragment>\n      ) : (\n        \"\"\n      )}\n    </Fragment>\n  );\n};\n\nexport default compose<IProps, any>(\n  withStyles(styles),\n  memo\n)(RoomTypes);\n"]},"metadata":{},"sourceType":"module"}
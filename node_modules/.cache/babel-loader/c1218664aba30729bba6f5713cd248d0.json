{"ast":null,"code":"var _jsxFileName = \"/home/ducnhat/Code/x-files/src/components/Maps/MapDetail.tsx\";\nimport createStyles from '@material-ui/core/styles/createStyles';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport React, { useContext, memo } from 'react';\nimport { compose } from 'recompose';\nimport _ from 'lodash';\nimport MapMarker from '@/components/Rooms/MapMarker';\nimport GoogleMapReact from 'google-map-react';\nimport { GlobalContext } from '@/store/context/GlobalContext';\nimport { RoomMapContext } from '@/store/context/Room/RoomMapContext';\n\nvar styles = function styles(theme) {\n  return createStyles({});\n}; // @ts-ignore\n\n\nvar MapDetail = function MapDetail(props) {\n  var classes = props.classes,\n      rooms = props.rooms,\n      center = props.center,\n      hoverAction = props.hoverAction,\n      hoverId = props.hoverId,\n      setRooms = props.setRooms;\n\n  var _useContext = useContext(GlobalContext),\n      width = _useContext.width;\n\n  var _useContext2 = useContext(RoomMapContext),\n      mapDispatch = _useContext2.dispatch;\n\n  var xsMode = width === 'xs';\n  var mapOptions = {\n    gestureHandling: 'greedy',\n    zoomControl: !xsMode\n  };\n\n  var onMapMove = function onMapMove(data) {\n    if (hoverId === 0) {\n      var bounds = data.bounds;\n      var coords = {\n        lat_max: bounds.ne.lat,\n        lat_min: bounds.sw.lat,\n        long_max: bounds.ne.lng,\n        long_min: bounds.sw.lng\n      };\n      mapDispatch({\n        type: 'setMapCoords',\n        coords: coords\n      });\n    }\n  };\n\n  return React.createElement(GoogleMapReact, {\n    options: mapOptions,\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_GOOGLE_MAP_KEY || 'AIzaSyCEXOt4NhCX7FzuqDs83AsrIBGUdzl5SCY'\n    },\n    defaultCenter: {\n      lat: 21.02,\n      lng: 105.83\n    },\n    center: center,\n    defaultZoom: 13,\n    hoverDistance: 40,\n    onChildMouseEnter: function onChildMouseEnter(h) {\n      return hoverAction(parseInt(h));\n    },\n    onChildMouseLeave: function onChildMouseLeave(h) {\n      return hoverAction(0);\n    },\n    onChange: onMapMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, _.map(rooms, function (room) {\n    return React.createElement(MapMarker, {\n      isHover: hoverId === room.id,\n      room: room,\n      key: room.id,\n      lat: room.latitude,\n      lng: room.longitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default compose(withStyles(styles), memo)(MapDetail);","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/components/Maps/MapDetail.tsx"],"names":["createStyles","withStyles","React","useContext","memo","compose","_","MapMarker","GoogleMapReact","GlobalContext","RoomMapContext","styles","theme","MapDetail","props","classes","rooms","center","hoverAction","hoverId","setRooms","width","mapDispatch","dispatch","xsMode","mapOptions","gestureHandling","zoomControl","onMapMove","data","bounds","coords","lat_max","ne","lat","lat_min","sw","long_max","lng","long_min","type","key","process","env","REACT_APP_GOOGLE_MAP_KEY","h","parseInt","map","room","id","latitude","longitude"],"mappings":"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","sourcesContent":["import { ThemeCustom } from '@/components/Theme/Theme';\nimport createStyles from '@material-ui/core/styles/createStyles';\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\nimport React, { ComponentType, Fragment, useContext, memo, Dispatch, SetStateAction, useState } from 'react';\nimport { compose } from 'recompose';\nimport _ from 'lodash';\nimport MapMarker from '@/components/Rooms/MapMarker';\nimport GoogleMapReact, { MapOptions, Coords, ChangeEventValue } from 'google-map-react';\nimport { IGlobalContext, GlobalContext } from '@/store/context/GlobalContext';\nimport { RoomIndexRes } from '@/types/Requests/Rooms/RoomResponses';\nimport { IRoomMapContext, RoomMapContext } from '@/store/context/Room/RoomMapContext';\nimport { MapCoords } from '@/types/Requests/Rooms/RoomRequests';\nimport { RoomReviewInfoRes } from '@/types/Requests/ReviewRoom/ReviewResponse';\n\ninterface IProps {\n  classes?: any\n  rooms: RoomIndexRes[],\n  center: Coords\n  hoverAction(id: number): void\n  hoverId: number\n  setRooms(rooms: RoomIndexRes[]): void\n}\n\nconst styles: any = (theme: ThemeCustom) => createStyles({});\n\n// @ts-ignore\nconst MapDetail: ComponentType<IProps> = (props: IProps) => {\n  const { classes, rooms, center, hoverAction, hoverId, setRooms } = props;\n  const { width } = useContext<IGlobalContext>(GlobalContext);\n  const { dispatch: mapDispatch } = useContext<IRoomMapContext>(RoomMapContext);\n  const xsMode = width === 'xs';\n\n  const mapOptions: MapOptions = {\n    gestureHandling: 'greedy',\n    zoomControl: !xsMode,\n  };\n\n  const onMapMove = (data: ChangeEventValue) => {\n    if (hoverId === 0) {\n      const bounds = data.bounds;\n      const coords: MapCoords = {\n        lat_max: bounds.ne.lat,\n        lat_min: bounds.sw.lat,\n        long_max: bounds.ne.lng,\n        long_min: bounds.sw.lng,\n      };\n\n      mapDispatch({\n        type: 'setMapCoords',\n        coords: coords,\n      });\n    }\n  };\n\n  return (\n    <GoogleMapReact\n      options={mapOptions}\n      bootstrapURLKeys={{\n        key: process.env.REACT_APP_GOOGLE_MAP_KEY || 'AIzaSyCEXOt4NhCX7FzuqDs83AsrIBGUdzl5SCY',\n      }}\n      defaultCenter={{ lat: 21.02, lng: 105.83 }}\n      center={center}\n      defaultZoom={13}\n      hoverDistance={40}\n      onChildMouseEnter={h => hoverAction(parseInt(h))}\n      onChildMouseLeave={h => hoverAction(0)}\n      onChange={onMapMove}\n    >\n      {_.map(rooms, room => (\n        <MapMarker\n          isHover={hoverId === room.id}\n          room={room}\n          key={room.id}\n          lat={room.latitude}\n          lng={room.longitude}\n        />\n      ))}\n    </GoogleMapReact>\n  );\n};\n\nexport default compose<IProps, any>(\n  withStyles(styles),\n  memo,\n)(MapDetail);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createContext } from 'react';\nimport { updateObject } from '@/store/utility';\nexport var RoomMapContext = createContext(null);\nexport var RoomMapStateInit = {\n  id: 0,\n  isMapOpen: false\n};\nexport var RoomMapReducer = function RoomMapReducer(state, action) {\n  switch (action.type) {\n    case 'setRoomId':\n      return updateObject(state, {\n        id: action.id\n      });\n\n    case 'setMapOpen':\n      return updateObject(state, {\n        isMapOpen: action.status\n      });\n\n    case 'setMapCoords':\n      return updateObject(state, {\n        coords: action.coords\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/store/context/Room/RoomMapContext.tsx"],"names":["createContext","updateObject","RoomMapContext","RoomMapStateInit","id","isMapOpen","RoomMapReducer","state","action","type","status","coords"],"mappings":"AAAA,SAAmBA,aAAnB,QAAwC,OAAxC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAGA,OAAO,IAAMC,cAAc,GAAGF,aAAa,CAAwB,IAAxB,CAApC;AAiBP,OAAO,IAAMG,gBAA8B,GAAG;AAC5CC,EAAAA,EAAE,EAAE,CADwC;AAE5CC,EAAAA,SAAS,EAAE;AAFiC,CAAvC;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAsBC,MAAtB,EAAgD;AAC5E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOR,YAAY,CAAeM,KAAf,EAAsB;AACvCH,QAAAA,EAAE,EAAEI,MAAM,CAACJ;AAD4B,OAAtB,CAAnB;;AAGF,SAAK,YAAL;AACE,aAAOH,YAAY,CAAeM,KAAf,EAAsB;AACvCF,QAAAA,SAAS,EAAEG,MAAM,CAACE;AADqB,OAAtB,CAAnB;;AAGF,SAAK,cAAL;AACE,aAAOT,YAAY,CAAeM,KAAf,EAAsB;AACvCI,QAAAA,MAAM,EAAEH,MAAM,CAACG;AADwB,OAAtB,CAAnB;;AAGF;AACE,aAAOJ,KAAP;AAdJ;AAgBD,CAjBM","sourcesContent":["import { Dispatch, createContext } from 'react';\nimport { updateObject } from '@/store/utility';\nimport { MapCoords } from '@/types/Requests/Rooms/RoomRequests';\n\nexport const RoomMapContext = createContext<IRoomMapContext | any>(null);\n\nexport interface IRoomMapContext {\n  state: RoomMapState,\n  dispatch: Dispatch<RoomMapAction>\n}\n\nexport type RoomMapAction = { type: 'setRoomId', id: number }\n  | { type: 'setMapOpen', status: boolean }\n  | { type: 'setMapCoords', coords: MapCoords }\n\nexport type RoomMapState = {\n  readonly id: number\n  readonly isMapOpen: boolean\n  readonly coords?: MapCoords\n}\n\nexport const RoomMapStateInit: RoomMapState = {\n  id: 0,\n  isMapOpen: false,\n};\n\nexport const RoomMapReducer = (state: RoomMapState, action: RoomMapAction) => {\n  switch (action.type) {\n    case 'setRoomId':\n      return updateObject<RoomMapState>(state, {\n        id: action.id,\n      });\n    case 'setMapOpen':\n      return updateObject<RoomMapState>(state, {\n        isMapOpen: action.status,\n      });\n    case 'setMapCoords':\n      return updateObject<RoomMapState>(state, {\n        coords: action.coords,\n      });\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
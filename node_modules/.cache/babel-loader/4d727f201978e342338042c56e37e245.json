{"ast":null,"code":"import _regeneratorRuntime from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createContext } from 'react';\nimport qs from 'query-string';\nimport { axios } from '@/utils/axiosInstance';\nimport { updateObject } from '@/store/utility';\nimport { fetchRoom } from '@/store/context/Room/RoomIndexContext';\nexport var RoomHomepageContext = createContext(null);\nexport var RoomHotStateInit = {\n  roomsHot: [],\n  roomsCity: [],\n  roomsNew: []\n};\nexport var RoomHotReducer = function RoomHotReducer(state, action) {\n  switch (action.type) {\n    case 'setRoomHot':\n      return updateObject(state, {\n        roomsHot: action.rooms\n      });\n\n    case 'setRoomCity':\n      return updateObject(state, {\n        roomsCity: action.rooms\n      });\n\n    case 'setRoomNew':\n      return updateObject(state, {\n        roomsNew: action.rooms\n      });\n\n    default:\n      return state;\n  }\n};\nexport var getRoomHot =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var query, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = {\n              include: 'details,media,city,district',\n              hot: 1,\n              limit: 10\n            };\n            url = \"rooms?\".concat(qs.stringify(query));\n            return _context.abrupt(\"return\", fetchRoom(url));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getRoomHot() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getRoomCity =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var query, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            query = {\n              hot: 1\n            };\n            _context2.next = 3;\n            return axios.get(\"rooms/number-room-by-city?\".concat(qs.stringify(query)));\n\n          case 3:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getRoomCity() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getRoomNew =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var query, url;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            query = {\n              include: 'details,media,city,district',\n              limit: 10\n            };\n            url = \"get-new-room?\".concat(qs.stringify(query));\n            return _context3.abrupt(\"return\", fetchRoom(url));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function getRoomNew() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/store/context/Room/RoomHomepageContext.tsx"],"names":["createContext","qs","axios","updateObject","fetchRoom","RoomHomepageContext","RoomHotStateInit","roomsHot","roomsCity","roomsNew","RoomHotReducer","state","action","type","rooms","getRoomHot","query","include","hot","limit","url","stringify","getRoomCity","get","res","data","getRoomNew"],"mappings":";;AAAA,SAASA,aAAT,QAAmD,OAAnD;AAGA,OAAOC,EAAP,MAAe,cAAf;AAEA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAKA,SAASC,SAAT,QAA0B,uCAA1B;AAEA,OAAO,IAAMC,mBAAmB,GAAGL,aAAa,CAA6B,IAA7B,CAAzC;AAiBP,OAAO,IAAMM,gBAAmC,GAAG;AAChDC,EAAAA,QAAQ,EAAE,EADsC;AAEhDC,EAAAA,SAAS,EAAE,EAFqC;AAGhDC,EAAAA,QAAQ,EAAE;AAHsC,CAA5C;AAMP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAA2BC,MAA3B,EAA6E;AACxG,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,YAAL;AACG,aAAOV,YAAY,CAAoBQ,KAApB,EAA2B;AAC3CJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE;AAD0B,OAA3B,CAAnB;;AAGH,SAAK,aAAL;AACG,aAAOX,YAAY,CAAoBQ,KAApB,EAA2B;AAC3CH,QAAAA,SAAS,EAAEI,MAAM,CAACE;AADyB,OAA3B,CAAnB;;AAGH,SAAK,YAAL;AACG,aAAOX,YAAY,CAAoBQ,KAApB,EAA2B;AAC3CF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAD0B,OAA3B,CAAnB;;AAGH;AACG,aAAOH,KAAP;AAdN;AAgBF,CAjBM;AAmBP,OAAO,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,KADiB,GACoB;AACxCC,cAAAA,OAAO,EAAE,6BAD+B;AAExCC,cAAAA,GAAG,EAAE,CAFmC;AAGxCC,cAAAA,KAAK,EAAE;AAHiC,aADpB;AAMjBC,YAAAA,GANiB,mBAMFnB,EAAE,CAACoB,SAAH,CAAaL,KAAb,CANE;AAAA,6CAQhBZ,SAAS,CAACgB,GAAD,CARO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVL,UAAU;AAAA;AAAA;AAAA,GAAhB;AAWP,OAAO,IAAMO,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBN,YAAAA,KADkB,GACmB;AACxCE,cAAAA,GAAG,EAAE;AADmC,aADnB;AAAA;AAAA,mBAIsBhB,KAAK,CAACqB,GAAN,qCAAuCtB,EAAE,CAACoB,SAAH,CAAaL,KAAb,CAAvC,EAJtB;;AAAA;AAIlBQ,YAAAA,GAJkB;AAAA,8CAKjBA,GAAG,CAACC,IALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXH,WAAW;AAAA;AAAA;AAAA,GAAjB;AAQP,OAAO,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBV,YAAAA,KADiB,GACoB;AACxCC,cAAAA,OAAO,EAAE,6BAD+B;AAExCE,cAAAA,KAAK,EAAE;AAFiC,aADpB;AAKjBC,YAAAA,GALiB,0BAKKnB,EAAE,CAACoB,SAAH,CAAaL,KAAb,CALL;AAAA,8CAOhBZ,SAAS,CAACgB,GAAD,CAPO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVM,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["import { createContext, Dispatch, useEffect } from 'react';\nimport { RoomIndexRes, NumberRoomCity } from '@/types/Requests/Rooms/RoomResponses';\nimport { LocationDescriptorObject } from 'history';\nimport qs from 'query-string';\nimport { AxiosRes, Pagination, BaseResponse, TypeSelect } from '@/types/Requests/ResponseTemplate';\nimport { axios } from '@/utils/axiosInstance';\nimport { updateObject } from '@/store/utility';\nimport { RoomIndexGetParams, RoomUrlParams } from '@/types/Requests/Rooms/RoomRequests';\nimport { Range } from 'react-input-range';\nimport _ from 'lodash';\nimport { AxiosResponse } from 'axios';\nimport { fetchRoom } from '@/store/context/Room/RoomIndexContext';\n\nexport const RoomHomepageContext = createContext<IRoomHomepageContext | any>(null);\n\nexport interface IRoomHomepageContext {\n   state: RoomHomepageState,\n   dispatch: Dispatch<RoomHomepageAction>,\n}\n\nexport type RoomHomepageAction = { type: 'setRoomHot', rooms: RoomIndexRes[] }\n   | { type: 'setRoomCity', rooms: NumberRoomCity[] }\n   | { type: 'setRoomNew', rooms: RoomIndexRes[] }\n\nexport type RoomHomepageState = {\n   readonly roomsHot: RoomIndexRes[]\n   readonly roomsCity: NumberRoomCity[]\n   readonly roomsNew: RoomIndexRes[]\n}\n\nexport const RoomHotStateInit: RoomHomepageState = {\n   roomsHot: [],\n   roomsCity: [],\n   roomsNew: [],\n};\n\nexport const RoomHotReducer = (state: RoomHomepageState, action: RoomHomepageAction): RoomHomepageState => {\n   switch (action.type) {\n      case 'setRoomHot':\n         return updateObject<RoomHomepageState>(state, {\n            roomsHot: action.rooms,\n         });\n      case 'setRoomCity':\n         return updateObject<RoomHomepageState>(state, {\n            roomsCity: action.rooms,\n         });\n      case 'setRoomNew':\n         return updateObject<RoomHomepageState>(state, {\n            roomsNew: action.rooms,\n         });\n      default:\n         return state;\n   }\n};\n\nexport const getRoomHot = async (): Promise<BaseResponse<RoomIndexRes[]>> => {\n   const query: Partial<RoomIndexGetParams> = {\n      include: 'details,media,city,district',\n      hot: 1,\n      limit: 10,\n   };\n   const url = `rooms?${qs.stringify(query)}`;\n\n   return fetchRoom(url);\n};\n\nexport const getRoomCity = async () => {\n   const query: Partial<RoomIndexGetParams> = {\n      hot: 1,\n   };\n   const res: AxiosRes<NumberRoomCity[]> = await axios.get(`rooms/number-room-by-city?${qs.stringify(query)}`);\n   return res.data;\n};\n\nexport const getRoomNew = async (): Promise<BaseResponse<RoomIndexRes[]>> => {\n   const query: Partial<RoomIndexGetParams> = {\n      include: 'details,media,city,district',\n      limit: 10,\n   };\n   const url = `get-new-room?${qs.stringify(query)}`;\n\n   return fetchRoom(url);\n};"]},"metadata":{},"sourceType":"module"}
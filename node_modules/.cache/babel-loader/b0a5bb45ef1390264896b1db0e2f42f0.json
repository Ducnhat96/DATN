{"ast":null,"code":"import _slicedToArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ducnhat/Code/x-files/src/components/Utils/DateRangeController.tsx\";\nimport * as act from '@/store/actions/actionTypes';\nimport moment from 'moment';\nimport React, { useState, useEffect, Fragment, useContext } from 'react';\nimport { DayPickerRangeController } from 'react-dates';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport 'react-dates/initialize';\nimport '@/styles/date-picker.scss';\nimport '@/styles/Airbnb/date-picker-homepage.scss';\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport { newRoomLocation } from '@/store/context/Room/RoomIndexContext';\nimport { GlobalContext } from '@/store/context/GlobalContext';\n\nvar styles = function styles(theme) {\n  return createStyles({\n    applyButton: {\n      background: 'transparent',\n      boxShadow: 'none',\n      color: '#ff9800',\n      fontWeight: 700,\n      textTransform: 'initial',\n      fontSize: '16px',\n      padding: '2px 11px'\n    }\n  });\n};\n\nvar DateRangeController = function DateRangeController(props) {\n  var filter = props.filter,\n      updateDate = props.updateDate,\n      classes = props.classes;\n\n  var _useState = useState('startDate'),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusedInput = _useState2[0],\n      setFocusedInput = _useState2[1];\n\n  var _useContext = useContext(GlobalContext),\n      history = _useContext.history;\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      city_id = _useState4[0],\n      setCityId = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      district_id = _useState6[0],\n      setDistrictId = _useState6[1];\n\n  var startDate = filter.startDate,\n      endDate = filter.endDate;\n  var sd = startDate ? moment(startDate) : null;\n  var ed = endDate ? moment(endDate) : null;\n\n  var onDateChange = function onDateChange(startDate, endDate) {\n    if (focusedInput === 'startDate') {\n      endDate = null;\n    }\n\n    updateDate({\n      startDate: startDate,\n      endDate: endDate\n    });\n  };\n\n  var applyFilter = function applyFilter() {\n    var pushQuery = {\n      number_of_rooms: filter.roomsCount,\n      check_in: filter.startDate,\n      check_out: filter.endDate,\n      number_of_guests: filter.guestsCount,\n      most_popular: null,\n      rent_type: filter.bookingType !== 0 ? filter.bookingType : undefined,\n      city_id: city_id ? city_id : '',\n      district_id: district_id ? district_id : ''\n    };\n    var location = newRoomLocation(pushQuery);\n    history.push(location);\n  };\n\n  useEffect(function () {\n    var checkFilter = !filter.startDate && !filter.endDate;\n    var oldDate = moment(filter.startDate) < moment();\n\n    if (checkFilter || oldDate) {\n      updateDate({\n        startDate: moment(),\n        endDate: moment().add(7, 'days')\n      });\n    }\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(DayPickerRangeController, {\n    startDate: sd,\n    endDate: ed,\n    onDatesChange: function onDatesChange(_ref) {// onDateChange(startDate, endDate);\n\n      var startDate = _ref.startDate,\n          endDate = _ref.endDate;\n    },\n    focusedInput: focusedInput,\n    onFocusChange: function onFocusChange(focusedInput) {\n      setFocusedInput(!!focusedInput ? focusedInput : 'startDate');\n    },\n    orientation: \"horizontal\",\n    numberOfMonths: 2,\n    verticalHeight: 400,\n    noBorder: true,\n    initialVisibleMonth: function initialVisibleMonth() {\n      return moment();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: classes.applyButton,\n    onClick: applyFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"\\xC1p d\\u1EE5ng\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    filter: state.searchFilter\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateDate: function updateDate(date) {\n      return dispatch({\n        type: act.CHANGE_DATE,\n        date: date\n      });\n    }\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withStyles(styles))(DateRangeController);","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/components/Utils/DateRangeController.tsx"],"names":["act","moment","React","useState","useEffect","Fragment","useContext","DayPickerRangeController","connect","compose","createStyles","withStyles","Button","newRoomLocation","GlobalContext","styles","theme","applyButton","background","boxShadow","color","fontWeight","textTransform","fontSize","padding","DateRangeController","props","filter","updateDate","classes","focusedInput","setFocusedInput","history","city_id","setCityId","district_id","setDistrictId","startDate","endDate","sd","ed","onDateChange","applyFilter","pushQuery","number_of_rooms","roomsCount","check_in","check_out","number_of_guests","guestsCount","most_popular","rent_type","bookingType","undefined","location","push","checkFilter","oldDate","add","mapStateToProps","state","searchFilter","mapDispatchToProps","dispatch","date","type","CHANGE_DATE"],"mappings":"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","sourcesContent":["import * as act from '@/store/actions/actionTypes';\nimport { ReducersType } from '@/store/reducers';\nimport { SearchFilterState, SearchFilterAction, DateRange } from '@/store/reducers/searchFilter';\nimport moment, { Moment } from 'moment';\nimport React, { useState, useEffect, ComponentType, Fragment, useContext } from 'react';\nimport { FocusedInputShape, DayPickerRangeController } from 'react-dates';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { Dispatch } from 'redux';\nimport 'react-dates/initialize';\nimport '@/styles/date-picker.scss';\nimport '@/styles/Airbnb/date-picker-homepage.scss';\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { ThemeCustom } from '../Theme/Theme';\nimport Button from \"@material-ui/core/Button/Button\";\nimport { RoomUrlParams } from '@/types/Requests/Rooms/RoomRequests';\nimport { newRoomLocation } from '@/store/context/Room/RoomIndexContext';\nimport { GlobalContext, IGlobalContext } from '@/store/context/GlobalContext';\n\n\ninterface IProps {\n  classes?: any;\n  filter: SearchFilterState\n\n  updateDate(date: DateRange): any\n}\n\n\nconst styles: any = (theme: ThemeCustom) =>\n  createStyles({\n    applyButton: {\n      background: 'transparent',\n      boxShadow: 'none',\n      color: '#ff9800',\n      fontWeight: 700,\n      textTransform: 'initial',\n      fontSize: '16px',\n      padding: '2px 11px'\n    }\n  });\n\nconst DateRangeController: ComponentType<IProps> = (props: IProps) => {\n  const { filter, updateDate, classes } = props;\n\n  const [focusedInput, setFocusedInput] = useState<FocusedInputShape>('startDate');\n  const { history } = useContext<IGlobalContext>(GlobalContext);\n\n  const [city_id, setCityId] = useState('');\n  const [district_id, setDistrictId] = useState('');\n\n  const { startDate, endDate } = filter;\n\n  const sd = startDate ? moment(startDate) : null;\n  const ed = endDate ? moment(endDate) : null;\n\n  const onDateChange = (startDate: Moment | null, endDate: Moment | null) => {\n    if (focusedInput === 'startDate') {\n      endDate = null\n    }\n    updateDate({ startDate, endDate });\n  };\n\n\n  const applyFilter = () => {\n    const pushQuery: RoomUrlParams = {\n      number_of_rooms: filter.roomsCount,\n      check_in: filter.startDate,\n      check_out: filter.endDate,\n      number_of_guests: filter.guestsCount,\n      most_popular: null,\n      rent_type: filter.bookingType !== 0 ? filter.bookingType : undefined,\n      city_id: city_id ? city_id : '',\n      district_id: district_id ? district_id : ''\n\n    };\n    const location = newRoomLocation(pushQuery);\n    history.push(location);\n  }\n\n\n  useEffect(() => {\n    let checkFilter = !filter.startDate && !filter.endDate;\n    let oldDate = moment(filter.startDate) < moment();\n\n    if (checkFilter || oldDate) {\n      updateDate({\n        startDate: moment(),\n        endDate: moment().add(7, 'days'),\n      });\n    }\n\n  }, []);\n\n  return (\n    <Fragment>\n      {(\n        <DayPickerRangeController\n          startDate={sd}\n          endDate={ed}\n          onDatesChange={({ startDate, endDate }) => {\n            // onDateChange(startDate, endDate);\n          }}\n          focusedInput={focusedInput}\n          onFocusChange={focusedInput => {\n            setFocusedInput(!!focusedInput ? focusedInput : 'startDate');\n          }}\n          orientation='horizontal'\n          numberOfMonths={2}\n          verticalHeight={400}\n          noBorder\n          initialVisibleMonth={() => moment()}\n        />\n      )}\n      <Button className={classes.applyButton} onClick={applyFilter}>\n        Áp dụng\n          </Button>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: ReducersType) => {\n  return {\n    filter: state.searchFilter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<SearchFilterAction>) => {\n  return {\n    updateDate: (date: DateRange) => dispatch({\n      type: act.CHANGE_DATE,\n      date: date,\n    }),\n  };\n};\n\nexport default compose<IProps, any>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withStyles(styles)\n)(DateRangeController);\n"]},"metadata":{},"sourceType":"module"}
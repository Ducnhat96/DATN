{"ast":null,"code":"import _slicedToArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ducnhat/Code/x-files/src/components/Utils/DateRange.tsx\";\nimport * as act from '@/store/actions/actionTypes';\nimport Event from '@material-ui/icons/Event';\nimport moment from 'moment';\nimport React, { useState, useEffect } from 'react';\nimport { DateRangePicker } from 'react-dates';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport 'react-dates/initialize';\nimport '@/styles/date-picker.scss';\n\nvar DateRangePK = function DateRangePK(props) {\n  var filter = props.filter,\n      updateDate = props.updateDate,\n      openDatePicker = props.openDatePicker,\n      setOpenDatePicker = props.setOpenDatePicker,\n      toggleOpenGuestSelect = props.toggleOpenGuestSelect;\n\n  var onDateChange = function onDateChange(startDate, endDate) {// if (focusedInput === 'startDate') {\n    //   endDate = null\n    // }\n    // if (endDate && toggleOpenGuestSelect) toggleOpenGuestSelect(true);\n    // updateDate({ startDate, endDate });\n  };\n\n  useEffect(function () {\n    var checkFilter = !filter.startDate && !filter.endDate;\n    var oldDate = moment(filter.startDate) < moment();\n\n    if (checkFilter || oldDate) {\n      updateDate({\n        startDate: moment(),\n        endDate: moment().add(7, 'days')\n      });\n    }\n  }, []);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusedInput = _useState2[0],\n      setFocusedInput = _useState2[1];\n\n  return React.createElement(DateRangePicker, {\n    startDateId: \"startDate\",\n    endDateId: \"endDate\",\n    startDate: filter.startDate ? moment(filter.startDate) : null,\n    endDate: filter.endDate ? moment(filter.endDate) : null,\n    onDatesChange: function onDatesChange(_ref) {// onDateChange(startDate, endDate);\n\n      var startDate = _ref.startDate,\n          endDate = _ref.endDate;\n    },\n    numberOfMonths: 1,\n    focusedInput: focusedInput ? focusedInput : openDatePicker,\n    onFocusChange: function onFocusChange(focusedInput) {\n      setFocusedInput(focusedInput);\n      if (setOpenDatePicker) setOpenDatePicker(focusedInput);\n    },\n    minimumNights: 0,\n    noBorder: true,\n    displayFormat: \"DD/MM/YYYY\",\n    customInputIcon: React.createElement(Event, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }),\n    hideKeyboardShortcutsPanel: true // isDayBlocked={(day: Moment) => {\n    //   console.log(day.format('YYYY-MM-DD'));\n    //   return day.format('YYYY-MM-DD') == moment('2019-01-12').format('YYYY-MM-DD');\n    // }}\n    ,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    filter: state.searchFilter\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateDate: function updateDate(date) {\n      return dispatch({\n        type: act.CHANGE_DATE,\n        date: date\n      });\n    }\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(DateRangePK);","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/components/Utils/DateRange.tsx"],"names":["act","Event","moment","React","useState","useEffect","DateRangePicker","connect","compose","DateRangePK","props","filter","updateDate","openDatePicker","setOpenDatePicker","toggleOpenGuestSelect","onDateChange","startDate","endDate","checkFilter","oldDate","add","focusedInput","setFocusedInput","mapStateToProps","state","searchFilter","mapDispatchToProps","dispatch","date","type","CHANGE_DATE"],"mappings":"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","sourcesContent":["import * as act from '@/store/actions/actionTypes';\nimport { ReducersType } from '@/store/reducers';\nimport { SearchFilterState, SearchFilterAction, DateRange } from '@/store/reducers/searchFilter';\nimport Event from '@material-ui/icons/Event';\nimport moment, { Moment } from 'moment';\nimport React, { useState, useEffect, ComponentType, SetStateAction } from 'react';\nimport { DateRangePicker, FocusedInputShape } from 'react-dates';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { Dispatch } from 'redux';\nimport 'react-dates/initialize';\nimport '@/styles/date-picker.scss';\n\n\n\ninterface IProps {\n  filter: SearchFilterState\n  updateDate(date: DateRange): any\n  openDatePicker?: any\n  toggleOpenGuestSelect?: Dispatch<SetStateAction<any>>\n  setOpenDatePicker?: Dispatch<SetStateAction<any>>\n}\n\n\n\nconst DateRangePK: ComponentType<IProps> = (props: IProps) => {\n  const { filter, updateDate, openDatePicker, setOpenDatePicker, toggleOpenGuestSelect } = props;\n\n  const onDateChange = (startDate: Moment | null, endDate: Moment | null) => {\n    // if (focusedInput === 'startDate') {\n    //   endDate = null\n    // }\n\n    // if (endDate && toggleOpenGuestSelect) toggleOpenGuestSelect(true);\n    // updateDate({ startDate, endDate });\n  };\n\n  useEffect(() => {\n    let checkFilter = !filter.startDate && !filter.endDate;\n    let oldDate = moment(filter.startDate) < moment();\n\n    if (checkFilter || oldDate) {\n      updateDate({\n        startDate: moment(),\n        endDate: moment().add(7, 'days'),\n      });\n    }\n\n  }, []);\n\n  const [focusedInput, setFocusedInput] = useState<FocusedInputShape | null>(null);\n  return (\n    <DateRangePicker\n      startDateId='startDate'\n      endDateId='endDate'\n      startDate={filter.startDate ? moment(filter.startDate) : null}\n      endDate={filter.endDate ? moment(filter.endDate) : null}\n      onDatesChange={({ startDate, endDate }) => {\n        // onDateChange(startDate, endDate);\n\n\n      }}\n      numberOfMonths={1}\n      focusedInput={focusedInput ? focusedInput : openDatePicker}\n      onFocusChange={focusedInput => {\n        setFocusedInput(focusedInput);\n        if (setOpenDatePicker) setOpenDatePicker(focusedInput);\n      }}\n      minimumNights={0}\n      noBorder\n      displayFormat='DD/MM/YYYY'\n      customInputIcon={<Event />}\n      hideKeyboardShortcutsPanel\n      // isDayBlocked={(day: Moment) => {\n      //   console.log(day.format('YYYY-MM-DD'));\n      //   return day.format('YYYY-MM-DD') == moment('2019-01-12').format('YYYY-MM-DD');\n      // }}\n      readOnly\n    />\n  );\n};\n\nconst mapStateToProps = (state: ReducersType) => {\n  return {\n    filter: state.searchFilter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<SearchFilterAction>) => {\n  return {\n    updateDate: (date: DateRange) => dispatch({\n      type: act.CHANGE_DATE,\n      date: date,\n    }),\n  };\n};\n\nexport default compose<IProps, any>(\n  connect(mapStateToProps, mapDispatchToProps),\n)(DateRangePK);\n"]},"metadata":{},"sourceType":"module"}
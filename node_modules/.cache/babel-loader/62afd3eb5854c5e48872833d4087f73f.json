{"ast":null,"code":"import _slicedToArray from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createContext } from \"react\";\nimport { updateObject } from \"@/store/utility\";\nimport { axios } from \"@/utils/axiosInstance\";\nimport qs from \"query-string\";\nexport var ProfileContext = createContext(null);\nexport var ProfileStateInit = {\n  profile: null,\n  bookings: []\n};\nexport var ProfileReducer = function ProfileReducer(state, action) {\n  switch (action.type) {\n    case \"setData\":\n      return updateObject(state, {\n        profile: action.profile,\n        bookings: action.bookings,\n        metaBookings: action.meta\n      });\n\n    case \"setDataBooking\":\n      return updateObject(state, {\n        bookings: action.bookings,\n        metaBookings: action.meta\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar getProfile =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"profile?include=city,district\");\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getProfile() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getUserBookingList =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(status, page) {\n    var params, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            params = {\n              status: status,\n              include: \"room.details,room.media\",\n              size: 5,\n              page: page\n            };\n            _context2.next = 3;\n            return axios.get(\"bookings?\".concat(qs.stringify(params)));\n\n          case 3:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getUserBookingList(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getDataProfile = function getDataProfile(dispatch, status, page) {\n  Promise.all([getProfile(), getUserBookingList(status, page)]).then(function (res) {\n    var _res = _slicedToArray(res, 2),\n        profile = _res[0],\n        bookings = _res[1];\n\n    dispatch({\n      type: \"setData\",\n      profile: profile.data,\n      bookings: bookings.data,\n      meta: bookings.meta\n    });\n  }).catch(function (err) {\n    console.log(err);\n  });\n};","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/store/context/Profile/ProfileContext.tsx"],"names":["createContext","updateObject","axios","qs","ProfileContext","ProfileStateInit","profile","bookings","ProfileReducer","state","action","type","metaBookings","meta","getProfile","get","res","data","getUserBookingList","status","page","params","include","size","stringify","getDataProfile","dispatch","Promise","all","then","catch","err","console","log"],"mappings":";;;AAAA,SAASA,aAAT,QAAoD,OAApD;AAGA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,SAASC,KAAT,QAAsB,uBAAtB;AAEA,OAAOC,EAAP,MAAe,cAAf;AAGA,OAAO,IAAMC,cAAc,GAAGJ,aAAa,CAAwB,IAAxB,CAApC;AAsBP,OAAO,IAAMK,gBAA8B,GAAG;AAC5CC,EAAAA,OAAO,EAAE,IADmC;AAE5CC,EAAAA,QAAQ,EAAE;AAFkC,CAAvC;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAsBC,MAAtB,EAAgD;AAC5E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAOV,YAAY,CAAeQ,KAAf,EAAsB;AACvCH,QAAAA,OAAO,EAAEI,MAAM,CAACJ,OADuB;AAEvCC,QAAAA,QAAQ,EAAEG,MAAM,CAACH,QAFsB;AAGvCK,QAAAA,YAAY,EAAEF,MAAM,CAACG;AAHkB,OAAtB,CAAnB;;AAKF,SAAK,gBAAL;AACE,aAAOZ,YAAY,CAAeQ,KAAf,EAAsB;AACvCF,QAAAA,QAAQ,EAAEG,MAAM,CAACH,QADsB;AAEvCK,QAAAA,YAAY,EAAEF,MAAM,CAACG;AAFkB,OAAtB,CAAnB;;AAIF;AACE,aAAOJ,KAAP;AAbJ;AAeD,CAhBM;;AAkBP,IAAMK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BZ,KAAK,CAACa,GAAN,CAC1C,+BAD0C,CAD3B;;AAAA;AACXC,YAAAA,GADW;AAAA,6CAIVA,GAAG,CAACC,IAJM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVH,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAOA,OAAO,IAAMI,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,MAAP,EAAwBC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,YAAAA,MAD0B,GACY;AAC1CF,cAAAA,MAAM,EAANA,MAD0C;AAE1CG,cAAAA,OAAO,EAAE,yBAFiC;AAG1CC,cAAAA,IAAI,EAAE,CAHoC;AAI1CH,cAAAA,IAAI,EAAEA;AAJoC,aADZ;AAAA;AAAA,mBAOelB,KAAK,CAACa,GAAN,oBACjCZ,EAAE,CAACqB,SAAH,CAAaH,MAAb,CADiC,EAPf;;AAAA;AAO1BL,YAAAA,GAP0B;AAAA,8CAUzBA,GAAG,CAACC,IAVqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBC,kBAAkB;AAAA;AAAA;AAAA,GAAxB;AAaP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,QAD4B,EAE5BP,MAF4B,EAG5BC,IAH4B,EAIzB;AACHO,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACd,UAAU,EAAX,EAAeI,kBAAkB,CAACC,MAAD,EAASC,IAAT,CAAjC,CAAZ,EACGS,IADH,CACQ,UAAAb,GAAG,EAAI;AAAA,8BACiBA,GADjB;AAAA,QACJV,OADI;AAAA,QACKC,QADL;;AAGXmB,IAAAA,QAAQ,CAAC;AACPf,MAAAA,IAAI,EAAE,SADC;AAEPL,MAAAA,OAAO,EAAEA,OAAO,CAACW,IAFV;AAGPV,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,IAHZ;AAIPJ,MAAAA,IAAI,EAAEN,QAAQ,CAACM;AAJR,KAAD,CAAR;AAMD,GAVH,EAWGiB,KAXH,CAWS,UAACC,GAAD,EAAqB;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAbH;AAcD,CAnBM","sourcesContent":["import { createContext, Dispatch, useContext } from \"react\";\nimport { ProfileInfoRes } from \"@/types/Requests/Profile/ProfileResponse\";\nimport { BookingIndexRes } from \"@/types/Requests/Booking/BookingResponses\";\nimport { updateObject } from \"@/store/utility\";\nimport { AxiosRes, Pagination } from \"@/types/Requests/ResponseTemplate\";\nimport { axios } from \"@/utils/axiosInstance\";\nimport { BookingIndexParams } from \"@/types/Requests/Booking/BookingRequests\";\nimport qs from \"query-string\";\nimport { AxiosError } from \"axios\";\n\nexport const ProfileContext = createContext<IProfileContext | any>(null);\n\nexport interface IProfileContext {\n  state: ProfileState;\n  dispatch: Dispatch<ProfileAction>;\n}\n\nexport type ProfileAction =\n  | {\n    type: \"setData\";\n    profile?: ProfileInfoRes;\n    bookings?: BookingIndexRes[];\n    meta?: Pagination;\n  }\n  | { type: \"setDataBooking\"; bookings?: BookingIndexRes[]; meta?: Pagination };\n\nexport type ProfileState = {\n  readonly profile?: ProfileInfoRes | null;\n  readonly bookings: BookingIndexRes[];\n  readonly metaBookings?: Pagination;\n};\n\nexport const ProfileStateInit: ProfileState = {\n  profile: null,\n  bookings: []\n};\n\nexport const ProfileReducer = (state: ProfileState, action: ProfileAction) => {\n  switch (action.type) {\n    case \"setData\":\n      return updateObject<ProfileState>(state, {\n        profile: action.profile,\n        bookings: action.bookings,\n        metaBookings: action.meta\n      });\n    case \"setDataBooking\":\n      return updateObject<ProfileState>(state, {\n        bookings: action.bookings,\n        metaBookings: action.meta\n      });\n    default:\n      return state;\n  }\n};\n\nconst getProfile = async () => {\n  const res: AxiosRes<ProfileInfoRes> = await axios.get(\n    \"profile?include=city,district\"\n  );\n  return res.data;\n};\n\nexport const getUserBookingList = async (status?: number, page?: number) => {\n  const params: Partial<BookingIndexParams> = {\n    status,\n    include: \"room.details,room.media\",\n    size: 5,\n    page: page\n  };\n  const res: AxiosRes<BookingIndexRes[]> = await axios.get(\n    `bookings?${qs.stringify(params)}`\n  );\n  return res.data;\n};\n\nexport const getDataProfile = (\n  dispatch: Dispatch<ProfileAction>,\n  status?: number,\n  page?: number\n) => {\n  Promise.all([getProfile(), getUserBookingList(status, page)])\n    .then(res => {\n      const [profile, bookings] = res;\n\n      dispatch({\n        type: \"setData\",\n        profile: profile.data,\n        bookings: bookings.data,\n        meta: bookings.meta\n      });\n    })\n    .catch((err: AxiosError) => {\n      console.log(err);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ducnhat/Code/x-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { axios } from \"@/utils/axiosInstance\";\nimport axiosBase from \"axios\";\nimport qs from \"query-string\";\nimport _ from \"lodash\";\nexport var makeRequestSingle = function makeRequestSingle() {\n  var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"GET\";\n  var call;\n  return function (url) {\n    if (call) {\n      call.cancel(\"Only one request allowed at a time.\");\n    }\n\n    call = axiosBase.CancelToken.source();\n    return axios.request({\n      method: method,\n      url: url,\n      cancelToken: call.token\n    });\n  };\n};\nvar get = makeRequestSingle();\nexport var searchSuggest =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(q) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return get(\"search-suggestions-web?key=\".concat(q));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function searchSuggest(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getRoomSearch =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(location, input) {\n    var params, query, signature, url, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            params = qs.parse(location.search);\n            query = {\n              include: \"details\",\n              name: input,\n              rent_type: params.rent_type,\n              check_in: params.check_in,\n              check_out: params.check_out,\n              number_guest: params.number_of_guests,\n              most_popular: params.most_popular,\n              price_day_from: params.price_day_from,\n              price_day_to: params.price_day_to,\n              manager: typeof params.instant !== \"undefined\" ? 1 : undefined,\n              sort_price_day: params.lowest_price === null ? 0 : 1,\n              standard_point: params.rating ? _.split(params.rating, \",\")[0] : undefined,\n              comfort_lists: params.amenities ? params.amenities : undefined,\n              type_room: params.room_type ? params.room_type : undefined\n            };\n            signature = \"rooms\";\n            url = \"\".concat(signature, \"?\").concat(qs.stringify(query));\n            _context2.next = 6;\n            return get(url);\n\n          case 6:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getRoomSearch(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/ducnhat/Code/x-files/src/store/context/searchSuggestion.ts"],"names":["axios","axiosBase","qs","_","makeRequestSingle","method","call","url","cancel","CancelToken","source","request","cancelToken","token","get","searchSuggest","q","res","data","getRoomSearch","location","input","params","parse","search","query","include","name","rent_type","check_in","check_out","number_guest","number_of_guests","most_popular","price_day_from","price_day_to","manager","instant","undefined","sort_price_day","lowest_price","standard_point","rating","split","comfort_lists","amenities","type_room","room_type","signature","stringify"],"mappings":"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","sourcesContent":["import { axios, AxiosRequestType } from \"@/utils/axiosInstance\";\nimport { AxiosRes } from \"@/types/Requests/ResponseTemplate\";\nimport { SearchSuggestRes } from \"@/types/Requests/Search/SearchResponse\";\nimport axiosBase, { CancelTokenSource } from \"axios\";\nimport { LocationDescriptorObject } from \"history\";\nimport {\n  RoomUrlParams,\n  RoomIndexGetParams\n} from \"@/types/Requests/Rooms/RoomRequests\";\nimport { RoomIndexRes } from \"@/types/Requests/Rooms/RoomResponses\";\nimport qs from \"query-string\";\nimport _ from \"lodash\";\n\nexport const makeRequestSingle = (method: AxiosRequestType = \"GET\") => {\n  let call: CancelTokenSource;\n  return (url: string) => {\n    if (call) {\n      call.cancel(\"Only one request allowed at a time.\");\n    }\n    call = axiosBase.CancelToken.source();\n\n    return axios.request({\n      method: method,\n      url: url,\n      cancelToken: call.token\n    });\n  };\n};\n\nconst get = makeRequestSingle();\n\nexport const searchSuggest = async (q: string) => {\n  // const res: AxiosRes<SearchSuggestRes[]> = await axios.get(`search-suggestions?key=${q}`);\n  const res: AxiosRes<SearchSuggestRes[]> = await get(\n    `search-suggestions-web?key=${q}`\n  );\n\n  return res.data.data;\n};\n\nexport const getRoomSearch = async (\n  location: LocationDescriptorObject,\n  input: string\n) => {\n  const params: RoomUrlParams = qs.parse(location.search!);\n\n  let query: Partial<RoomIndexGetParams> = {\n    include: \"details\",\n    name: input,\n    rent_type: params.rent_type,\n    check_in: params.check_in,\n    check_out: params.check_out,\n    number_guest: params.number_of_guests,\n    most_popular: params.most_popular,\n    price_day_from: params.price_day_from,\n    price_day_to: params.price_day_to,\n    manager: typeof params.instant !== \"undefined\" ? 1 : undefined,\n    sort_price_day: params.lowest_price === null ? 0 : 1,\n    standard_point: params.rating ? _.split(params.rating, \",\")[0] : undefined,\n    comfort_lists: params.amenities ? params.amenities : undefined,\n    type_room: params.room_type ? params.room_type : undefined\n  };\n\n  const signature = \"rooms\";\n  const url = `${signature}?${qs.stringify(query)}`;\n\n  const res: AxiosRes<RoomIndexRes[]> = await get(url);\n  return res.data;\n};\n"]},"metadata":{},"sourceType":"module"}